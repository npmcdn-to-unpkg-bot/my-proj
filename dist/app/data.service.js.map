{"version":3,"sources":["data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA+B,eAAe,CAAC,CAAA;AAE/C,2BAA+B,iBAAiB,CAAC,CAAA;AACjD,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,yBAAyB,CAAC,CAAA;AAIjC;IACE,qBAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAEvB,YAAO,GAAG,WAAW,CAAC,CAAE,iBAAiB;IAFf,CAAC;IAInC,6BAAO,GAAP;QACG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;aACvB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAEO,iCAAW,GAAnB,UAAoB,GAAa;QAC/B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;IACzB,CAAC;IACO,iCAAW,GAAnB,UAAqB,KAAU;QAC7B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAtBH;QAAC,iBAAU,EAAE;;mBAAA;IAuBb,kBAAC;AAAD,CAtBA,AAsBC,IAAA;AAtBY,mBAAW,cAsBvB,CAAA","file":"data.service.js","sourcesContent":["import { Injectable }     from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Main }           from './nvd3.component.ts';\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\n\r\n@Injectable()\r\nexport class DataService {\r\n  constructor (private http: Http) {}\r\n  \r\n  private dataUrl = 'data.json';  // URL to web API\r\n  \r\n  getData (): Observable<any> {\r\n     return this.http.get(this.dataUrl)\r\n               .map(this.extractData)\r\n               .catch(this.handleError);\r\n  }\r\n  \r\n  private extractData(res: Response) {\r\n    return res.json().data;\r\n  }\r\n  private handleError (error: any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    // We'd also dig deeper into the error to get a better message\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg); // log to console instead\r\n    return Observable.throw(errMsg);\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"/source/"}